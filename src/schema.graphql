enum SortOrder {
    ASC
    DESC
}

type Course {
    id: ID!
    courseTitle: String!
    courseDescription: String!
    courseDuration: Int! # in hours
    courseOutcome: String!
    courseCollection: String! # singular for now, anticipate it could been an array
}

type CourseCollection {
    name: String!
    courses: [Course!]!
}

input CoursesInput {
    limit: Int
    sortOrder: SortOrder
}

input AddCourseInput {
    courseTitle: String!
    courseDescription: String!
    courseDuration: Int! # in hours
    courseOutcome: String!
    courseCollection: String! # singular for now, anticipate it could been an array
}

input UpdateCourseInput {
    courseTitle: String
    courseDescription: String
    courseDuration: Int # in hours
    courseOutcome: String
    courseCollection: String # singular for now, anticipate it could been an array
}

type Query {
    courses(input: CoursesInput): [Course!]!
    course(id: ID!): Course!
    collections: [CourseCollection!]!
    collection(id: String!): CourseCollection! # get collection by collection name (could refactor to id if collections stored in another table with join)
}

type Mutation {
    addCourse(input: AddCourseInput!): Course!
    updateCourse(id: ID!, input: UpdateCourseInput!): Course
    deleteCourse(id: ID!): Course
}
